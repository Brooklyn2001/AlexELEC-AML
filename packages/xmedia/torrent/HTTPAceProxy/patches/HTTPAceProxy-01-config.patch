diff -Naurp HTTPAceProxy-3002740/aceconfig.py HTTPAceProxy-3002740-patch/aceconfig.py
--- HTTPAceProxy-3002740/aceconfig.py	2018-05-09 10:46:01.000000000 +0300
+++ HTTPAceProxy-3002740-patch/aceconfig.py	2018-05-12 19:44:53.000000000 +0300
@@ -36,7 +36,7 @@ class AceConfig(acedefconfig.AceDefConfi
     # On Windows Ace Engine refreshes acestream.port file only after loading GUI
     # Loading takes about ~10-15 seconds and we need to wait before taking port out of it
     # Set this to 0 if you don't use proxy at startup or don't need to wait
-    acestartuptimeout = 10
+    acestartuptimeout = 8
     # Ace Stream Engine connection timeout
     aceconntimeout = 5
     # Ace Stream Engine authentication result & API port answers timeout
@@ -120,14 +120,14 @@ class AceConfig(acedefconfig.AceDefConfi
     # Logging configuration
     #
     # Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
-    loglevel = logging.DEBUG
+    loglevel = logging.INFO
     # Log message forma
     logfmt = '%(filename)-20s [LINE:%(lineno)-4s]# %(levelname)-8s [%(asctime)s]  %(message)s'
     # Log date forma
     logdatefmt='%d.%m %H:%M:%S'
     # Full path to a log file
     # For Windows OS something like that logfile = "c:\\Python27\\log_AceHttp.txt"
-    logfile = None
+    logfile = '/var/log/aceproxy.log'
     #
     # This method is used to detect fake requests. Some players send such
     # requests in order to detect the MIME type and/or check the stream availability.
diff -Naurp HTTPAceProxy-3002740/acedefconfig.py HTTPAceProxy-3002740-patch/acedefconfig.py
--- HTTPAceProxy-3002740/acedefconfig.py	2018-05-09 10:46:01.000000000 +0300
+++ HTTPAceProxy-3002740-patch/acedefconfig.py	2018-05-12 19:35:51.000000000 +0300
@@ -3,7 +3,7 @@ AceProxy default configuration script
 DO NOT EDIT THIS FILE!
 Copy this file to aceconfig.py and change only needed options.
 '''
-import logging, colorer
+import logging
 import platform
 from aceclient.acemessages import AceConst
 
@@ -22,7 +22,7 @@ class AceDefConfig(object):
     acestartuptimeout = 10
     aceconntimeout = 5
     aceresulttimeout = 5
-    httphost='0.0.0.0'
+    httphost='0.0.0.0' # 'auto' - for autodetected ext IP
     httpport = 8000
     readchunksize = 8192
     readcachesize = 1024
diff -Naurp HTTPAceProxy-3002740/acehttp.py HTTPAceProxy-3002740-patch/acehttp.py
--- HTTPAceProxy-3002740/acehttp.py	2018-05-09 10:46:01.000000000 +0300
+++ HTTPAceProxy-3002740-patch/acehttp.py	2018-05-12 19:42:33.000000000 +0300
@@ -521,9 +521,11 @@ logger = logging.getLogger('HTTPServer')
 ### Initial settings for devnull
 if AceConfig.acespawn or AceConfig.transcode: DEVNULL = open(os.devnull, 'wb')
 #### Initial settings for AceHTTPproxy host IP
-if AceConfig.httphost == '0.0.0.0':
+if AceConfig.httphost == 'auto':
    AceConfig.httphost = [(s.connect(('1.1.1.1', 53)), s.getsockname()[0], s.close()) for s in [socket(AF_INET, SOCK_DGRAM)]][0][1]
-   logger.debug('Ace Stream HTTP Proxy server IP: %s autodetected' % AceConfig.httphost)
+   logger.info('Ace Stream HTTP Proxy server IP: %s autodetected' % AceConfig.httphost)
+else:
+    logger.info('Ace Stream HTTP Proxy server IP: %s' % AceConfig.httphost)
 # Check whether we can bind to the defined port safely
 if AceConfig.osplatform != 'Windows' and os.getuid() != 0 and AceConfig.httpport <= 1024:
     logger.error("Cannot bind to port %s without root privileges" % AceConfig.httpport)
@@ -554,16 +556,12 @@ except AttributeError: pass  # not avail
 AceStuff.clientcounter = ClientCounter()
 
 #### AceEngine startup
-name = 'ace_engine.exe' if AceConfig.osplatform == 'Windows' else 'acestreamengine'
+name = 'acestream.start'
 ace_pid = findProcess(name)
 AceStuff.ace = None
 if not ace_pid:
     if AceConfig.acespawn:
-        if AceConfig.osplatform == 'Windows':
-            import _winreg
-            AceStuff.aceProc = ""
-        else:
-            AceStuff.aceProc = AceConfig.acecmd.split()
+        AceStuff.aceProc = AceConfig.acecmd.split()
         if spawnAce(AceStuff.aceProc, 1):
             ace_pid = AceStuff.ace.pid
             AceStuff.ace = psutil.Process(ace_pid)
@@ -573,8 +571,6 @@ else: AceStuff.ace = psutil.Process(ace_
 if ace_pid :
     gevent.sleep(AceConfig.acestartuptimeout)
     logger.info("Ace Stream engine spawned with pid %s" % AceStuff.ace.pid)
-    # refresh the acestream.port file for Windows only after full loading...
-    if AceConfig.osplatform == 'Windows': detectPort()
 
 # Loading plugins
 # Trying to change dir (would fail in freezed state)
